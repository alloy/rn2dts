import type {TurboModule} from "../TurboModule/RCTExport";

type Permissions = {|alert: boolean, badge: boolean, sound: boolean|};

type Notification = {|
  +alertTitle?: ?string,
  +fireDate?: ?number,
  +alertBody?: ?string,
  +alertAction?: ?string,
  +userInfo?: ?Object,
  +category?: ?string,
  +repeatInterval?: ?string,
  +applicationIconBadgeNumber?: ?number,
  +isSilent?: ?boolean,
|};

interface Spec extends TurboModule {
  +getConstants: () => {...},
  +onFinishRemoteNotification: (
    notificationId: string,
    
/**
     * Type:
     *  'UIBackgroundFetchResultNewData' |
     *  'UIBackgroundFetchResultNoData' |
     *  'UIBackgroundFetchResultFailed'
     */fetchResult: string
  ) => void,
  +setApplicationIconBadgeNumber: (num: number) => void,
  +getApplicationIconBadgeNumber: (callback: (num: number) => void) => void,
  +requestPermissions: (
    permission: {|+alert: boolean, +badge: boolean, +sound: boolean|}
  ) => Promise<Permissions>,
  +abandonPermissions: () => void,
  +checkPermissions: (callback: (permissions: Permissions) => void) => void,
  +presentLocalNotification: (notification: Notification) => void,
  +scheduleLocalNotification: (notification: Notification) => void,
  +cancelAllLocalNotifications: () => void,
  +cancelLocalNotifications: (userInfo: Object) => void,
  +getInitialNotification: () => Promise<?Notification>,
  +getScheduledLocalNotifications: (
    callback: (notification: Notification) => void
  ) => void,
  +removeAllDeliveredNotifications: () => void,
  +removeDeliveredNotifications: (identifiers: Array<string>) => void,
  +getDeliveredNotifications: (
    callback: (notification: Array<Notification>) => void
  ) => void,
  +addListener: (eventType: string) => void,
  +removeListeners: (count: number) => void,
}
export type {Spec};

declare export default ?Spec;
