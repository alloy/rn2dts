const React = require("react");

import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheetTypes";

type PickerItemProps = $ReadOnly<
  {|
    
/**
   * Text to display for this item.
   */label: string,
    
/**
   * The value to be passed to picker's `onValueChange` callback when
   * this item is selected. Can be a string or an integer.
   */value?: ?(
      | number
      | string),
    
/**
   * Color of this item's text.
   * @platform android
   */color?: ColorValue,
    
/**
   * Used to locate the item in end-to-end tests.
   */testID?: string,
  |},
>;

declare class PickerItem
  extends React.Component<PickerItemProps> {render(): void}

type PickerProps = $ReadOnly<
  {|
    children?: React.Node,
    style?: ?TextStyleProp,
    
/**
   * Value matching value of one of the items. Can be a string or an integer.
   */selectedValue?: ?(
      | number
      | string),
    
/**
   * Callback for when an item is selected. This is called with the following parameters:
   *   - `itemValue`: the `value` prop of the item that was selected
   *   - `itemIndex`: the index of the selected item in this picker
   */onValueChange?: ?((
      itemValue: string | number,
      itemIndex: number
    ) => mixed),
    
/**
   * If set to false, the picker will be disabled, i.e. the user will not be able to make a
   * selection.
   * @platform android
   */enabled?: ?boolean,
    
/**
   * On Android, specifies how to display the selection items when the user taps on the picker:
   *
   *   - 'dialog': Show a modal dialog. This is the default.
   *   - 'dropdown': Shows a dropdown anchored to the picker view
   *
   * @platform android
   */mode?: ?(
      | 'dialog'
      | 'dropdown'),
    
/**
   * Style to apply to each of the item labels.
   * @platform ios
   */itemStyle?: ?TextStyleProp,
    
/**
   * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.
   * @platform android
   */prompt?: ?string,
    
/**
   * Used to locate this view in end-to-end tests.
   */testID?: ?string,
    
/**
   * The string used for the accessibility label. Will be read once focused on the picker but not on change.
   */accessibilityLabel?: ?string,
  |},
>;

declare class Picker
  extends React.Component<PickerProps> {
  static MODE_DIALOG: string,
  static MODE_DROPDOWN: string,
  static Item: typeof PickerItem,
  static defaultProps: {|mode: string|},
  render(): React.Node,
}
export type {PickerItem};

declare module.exports: typeof Picker;
