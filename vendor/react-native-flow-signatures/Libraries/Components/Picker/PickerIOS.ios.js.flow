const React = require("react");

import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheetTypes";
import type {SyntheticEvent} from "../../Types/CoreEventTypes";
import type {ViewProps} from "../View/ViewPropTypes";

type PickerIOSChangeEvent = SyntheticEvent<
  $ReadOnly<{|newValue: number | string, newIndex: number|}>,
>;

type RCTPickerIOSItemType = $ReadOnly<
  {|label: ?Label, value: ?(number | string), textColor: ?number|},
>;

type Label = Stringish | number;

type Props = $ReadOnly<
  {|
    ...ViewProps,
    children: React.ChildrenArray<React.Element<typeof PickerIOSItem>>,
    itemStyle?: ?TextStyleProp,
    onChange?: ?((event: PickerIOSChangeEvent) => mixed),
    onValueChange?: ?((itemValue: string | number, itemIndex: number) => mixed),
    selectedValue: ?(number | string),
    accessibilityLabel?: ?string,
  |},
>;

type State = {|
  selectedIndex: number,
  items: $ReadOnlyArray<RCTPickerIOSItemType>,
|};

type ItemProps = $ReadOnly<
  {|label: ?Label, value?: ?(number | string), color?: ?ColorValue|},
>;

declare var PickerIOSItem: (props: ItemProps) => null;

declare class PickerIOS
  extends React.Component<Props, State> {
  state: State,
  static Item: (props: ItemProps) => null,
  static getDerivedStateFromProps(props: Props): State,
  render(): React.Node,
  componentDidUpdate(): void,
}

declare module.exports: typeof PickerIOS;
