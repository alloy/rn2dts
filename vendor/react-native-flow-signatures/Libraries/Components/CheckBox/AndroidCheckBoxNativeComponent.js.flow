import * as React from "react";

import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";
import type {ViewProps} from "../View/ViewPropTypes";
import type {SyntheticEvent} from "../../Types/CoreEventTypes";

type CheckBoxEvent = SyntheticEvent<
  $ReadOnly<{|target: number, value: boolean|}>,
>;

type NativeProps = $ReadOnly<
  {|
    ...ViewProps,
    
/**
   * Used in case the props change removes the component.
   */onChange?: ?((
      event: CheckBoxEvent
    ) => mixed),
    
/**
   * Invoked with the new value when the value changes.
   */onValueChange?: ?((
      value: boolean
    ) => mixed),
    
/**
   * Used to locate this view in end-to-end tests.
   */testID?: ?string,
    on?: ?boolean,
    enabled?: boolean,
    tintColors: {|true: ?number, false: ?number|} | typeof undefined,
  |},
>;

type NativeType = HostComponent<NativeProps>;

interface NativeCommands {
  +setNativeValue: (viewRef: React.ElementRef<NativeType>, value: boolean) => void,
}

declare var Commands: NativeCommands;
export {Commands};

declare export default NativeType;
