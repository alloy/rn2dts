type Handle = number;
import type {Task} from "./TaskQueue";

declare var InteractionManager: {|
  Events: {|
    interactionStart: 'interactionStart',
    interactionComplete: 'interactionComplete',
  |},
  
/**
   * Schedule a function to run after all interactions have completed. Returns a cancellable
   * "promise".
   */runAfterInteractions(
    task: ?Task
  ): {then: Function, done: Function, cancel: Function, ...},
  
/**
   * Notify manager that an interaction has started.
   */createInteractionHandle(): Handle,
  
/**
   * Notify manager that an interaction has completed.
   */clearInteractionHandle(
    handle: Handle
  ): void,
  addListener: $FlowFixMe,
  
/**
   * A positive number will use setTimeout to schedule any tasks after the
   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
   * executed in one setImmediate batch (default).
   */setDeadline(
    deadline: number
  ): void,
|};
export type {Handle};

declare module.exports: typeof InteractionManager;
