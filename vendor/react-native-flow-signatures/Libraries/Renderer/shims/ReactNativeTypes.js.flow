import type {ElementRef} from "react";
import type {AbstractComponent} from "react";

type MeasureOnSuccessCallback = (
  x: number,
  y: number,
  width: number,
  height: number,
  pageX: number,
  pageY: number
) => void;

type MeasureInWindowOnSuccessCallback = (
  x: number,
  y: number,
  width: number,
  height: number
) => void;

type MeasureLayoutOnSuccessCallback = (
  left: number,
  top: number,
  width: number,
  height: number
) => void;

type AttributeType = 
  | true
  | $ReadOnly<
    {|diff?: <T>(arg1: T, arg2: T) => boolean, process?: (arg1: any) => any|},
  >;

type AttributeConfiguration<TProps = string, TStyleProps = string> = $ReadOnly<
  {
    [propName: TProps]: AttributeType,
    style: $ReadOnly<{[propName: TStyleProps]: AttributeType, ...}>,
    ...,
  },
>;

type ReactNativeBaseComponentViewConfig<TProps = string, TStyleProps = string> = $ReadOnly<
  {|
    baseModuleName?: string,
    bubblingEventTypes?: $ReadOnly<
      {
        [eventName: string]: $ReadOnly<
          {|
            phasedRegistrationNames: $ReadOnly<
              {|captured: string, bubbled: string|},
            >,
          |},
        >,
        ...,
      },
    >,
    Commands?: $ReadOnly<{[commandName: string]: number, ...}>,
    directEventTypes?: $ReadOnly<
      {[eventName: string]: $ReadOnly<{|registrationName: string|}>, ...},
    >,
    NativeProps?: $ReadOnly<{[propName: string]: string, ...}>,
    uiViewClassName: string,
    validAttributes: AttributeConfiguration<TProps, TStyleProps>,
  |},
>;

type ViewConfigGetter = () => ReactNativeBaseComponentViewConfig<>;

type NativeMethods = {
  blur(): void,
  focus(): void,
  measure(callback: MeasureOnSuccessCallback): void,
  measureInWindow(callback: MeasureInWindowOnSuccessCallback): void,
  measureLayout(
    relativeToNativeNode: number | ElementRef<HostComponent<mixed>>,
    onSuccess: MeasureLayoutOnSuccessCallback,
    onFail?: () => void
  ): void,
  setNativeProps(nativeProps: Object): void,
  ...,
};

type HostComponent<T> = AbstractComponent<T, $ReadOnly<NativeMethods>>;

type SecretInternalsType = {
  computeComponentStackForErrorReporting(tag: number): string,
  ...,
};

type SecretInternalsFabricType = {...};

type ReactNativeType = {
  findHostInstance_DEPRECATED(componentOrHandle: any): ?ElementRef<
    HostComponent<mixed>,
  >,
  findNodeHandle(componentOrHandle: any): ?number,
  dispatchCommand(handle: any, command: string, args: Array<any>): void,
  render(element: React$Element<any>, containerTag: any, callback: ?Function): any,
  unmountComponentAtNode(containerTag: number): any,
  unmountComponentAtNodeAndRemoveContainer(containerTag: number): any,
  // TODO (bvaughn) Add types
unstable_batchedUpdates: any,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: SecretInternalsType,
  ...,
};

type ReactFabricType = {
  findHostInstance_DEPRECATED(componentOrHandle: any): ?HostComponent<mixed>,
  findNodeHandle(componentOrHandle: any): ?number,
  dispatchCommand(handle: any, command: string, args: Array<any>): void,
  render(element: React$Element<any>, containerTag: any, callback: ?Function): any,
  unmountComponentAtNode(containerTag: number): any,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: SecretInternalsFabricType,
  ...,
};

type ReactNativeEventTarget = {
  node: Object,
  canonical: {
    _nativeTag: number,
    viewConfig: ReactNativeBaseComponentViewConfig<>,
    currentProps: Object,
    _internalInstanceHandle: Object,
    ...,
  },
  ...,
};

type ReactFaricEventTouch = {
  identifier: number,
  locationX: number,
  locationY: number,
  pageX: number,
  pageY: number,
  screenX: number,
  screenY: number,
  target: number,
  timestamp: number,
  force: number,
  ...,
};

type ReactFaricEvent = {
  touches: Array<ReactFaricEventTouch>,
  changedTouches: Array<ReactFaricEventTouch>,
  targetTouches: Array<ReactFaricEventTouch>,
  target: number,
  ...,
};
export type {MeasureOnSuccessCallback};

export type {MeasureInWindowOnSuccessCallback};

export type {MeasureLayoutOnSuccessCallback};

export type {AttributeConfiguration};

export type {ReactNativeBaseComponentViewConfig};

export type {ViewConfigGetter};

export type {NativeMethods};

export type {HostComponent};

export type {ReactNativeType};

export type {ReactFabricType};

export type {ReactNativeEventTarget};

export type {ReactFaricEventTouch};

export type {ReactFaricEvent};
