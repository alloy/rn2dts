type ReactNode = 
  | React$Element<any>
  | ReactPortal
  | ReactText
  | ReactFragment
  | ReactProvider<any>
  | ReactConsumer<any>;

type ReactEmpty = null | void | boolean;

type ReactFragment = ReactEmpty | Iterable<React$Node>;

type ReactNodeList = ReactEmpty | React$Node;

type ReactText = string | number;

type ReactProvider<T> = {
  $$typeof: Symbol | number,
  type: ReactProviderType<T>,
  key: null | string,
  ref: null,
  props: {value: T, children?: ReactNodeList, ...},
  ...,
};

type ReactProviderType<T> = {
  $$typeof: Symbol | number,
  _context: ReactContext<T>,
  ...,
};

type ReactConsumer<T> = {
  $$typeof: Symbol | number,
  type: ReactContext<T>,
  key: null | string,
  ref: null,
  props: {
    children: (value: T) => ReactNodeList,
    unstable_observedBits?: number,
    ...,
  },
  ...,
};

type ReactContext<T> = {
  $$typeof: Symbol | number,
  Consumer: ReactContext<T>,
  Provider: ReactProviderType<T>,
  _calculateChangedBits: ((a: T, b: T) => number) | null,
  _currentValue: T,
  _currentValue2: T,
  _threadCount: number,
  // DEV only
_currentRenderer?: Object | null,
  _currentRenderer2?: Object | null,
  ...,
};

type ReactPortal = {
  $$typeof: Symbol | number,
  key: null | string,
  containerInfo: any,
  children: ReactNodeList,
  // TODO: figure out the API for cross-renderer implementation.
implementation: any,
  ...,
};

type RefObject = {|current: any|};

type ReactEventResponderInstance<E, C> = {|
  fiber: Object,
  props: Object,
  responder: ReactEventResponder<E, C>,
  rootEventTypes: null | Set<string>,
  state: Object,
|};

type ReactEventResponderListener<E, C> = {|
  props: Object,
  responder: ReactEventResponder<E, C>,
|};

type ReactEventResponder<E, C> = {
  $$typeof: Symbol | number,
  displayName: string,
  targetEventTypes: null | Array<string>,
  targetPortalPropagation: boolean,
  rootEventTypes: null | Array<string>,
  getInitialState: null | ((props: Object) => Object),
  onEvent: null | ((event: E, context: C, props: Object, state: Object) => void),
  onRootEvent: 
    | null
    | ((event: E, context: C, props: Object, state: Object) => void),
  onMount: null | ((context: C, props: Object, state: Object) => void),
  onUnmount: null | ((context: C, props: Object, state: Object) => void),
  ...,
};

type EventPriority = 0 | 1 | 2;

declare var DiscreteEvent: EventPriority;
declare var UserBlockingEvent: EventPriority;
declare var ContinuousEvent: EventPriority;

type ReactFundamentalComponentInstance<C, H> = {|
  currentFiber: mixed,
  instance: mixed,
  prevProps: null | Object,
  props: Object,
  impl: ReactFundamentalImpl<C, H>,
  state: Object,
|};

type ReactFundamentalImpl<C, H> = {
  displayName: string,
  reconcileChildren: boolean,
  getInitialState?: (props: Object) => Object,
  getInstance: (context: C, props: Object, state: Object) => H,
  getServerSideString?: (context: C, props: Object) => string,
  getServerSideStringClose?: (context: C, props: Object) => string,
  onMount: (context: C, instance: mixed, props: Object, state: Object) => void,
  shouldUpdate?: (
    context: C,
    prevProps: null | Object,
    nextProps: Object,
    state: Object
  ) => boolean,
  onUpdate?: (
    context: C,
    instance: mixed,
    prevProps: null | Object,
    nextProps: Object,
    state: Object
  ) => void,
  onUnmount?: (context: C, instance: mixed, props: Object, state: Object) => void,
  onHydrate?: (context: C, props: Object, state: Object) => boolean,
  onFocus?: (context: C, props: Object, state: Object) => boolean,
  ...,
};

type ReactFundamentalComponent<C, H> = {|
  $$typeof: Symbol | number,
  impl: ReactFundamentalImpl<C, H>,
|};

type ReactScope = {|$$typeof: Symbol | number|};

type ReactScopeQuery = (
  type: string,
  props: {[string]: mixed, ...},
  instance: mixed
) => boolean;

type ReactScopeMethods = {|
  DO_NOT_USE_queryAllNodes(ReactScopeQuery): null | Array<Object>,
  DO_NOT_USE_queryFirstNode(ReactScopeQuery): null | Object,
  containsNode(Object): boolean,
  getChildContextValues: <T>(context: ReactContext<T>) => Array<T>,
|};

type ReactScopeInstance = {|fiber: Object, methods: null | ReactScopeMethods|};
export type {ReactNode};

export type {ReactEmpty};

export type {ReactFragment};

export type {ReactNodeList};

export type {ReactText};

export type {ReactProvider};

export type {ReactProviderType};

export type {ReactConsumer};

export type {ReactContext};

export type {ReactPortal};

export type {RefObject};

export type {ReactEventResponderInstance};

export type {ReactEventResponderListener};

export type {ReactEventResponder};

export type {EventPriority};

export {DiscreteEvent};
export {UserBlockingEvent};
export {ContinuousEvent};

export type {ReactFundamentalComponentInstance};

export type {ReactFundamentalImpl};

export type {ReactFundamentalComponent};

export type {ReactScope};

export type {ReactScopeQuery};

export type {ReactScopeMethods};

export type {ReactScopeInstance};
