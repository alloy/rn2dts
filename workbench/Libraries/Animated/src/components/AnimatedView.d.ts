import React from 'react';
declare const _default: React.AbstractComponent<{
    readonly " Thou shalt ignore this here prop or risketh a runtime mad as a bag of ferrets."?: any;
    readonly onBlur?: any;
    readonly onFocus?: any;
    readonly onAccessibilityAction?: any;
    readonly onAccessibilityTap?: any;
    readonly onLayout?: any;
    readonly onMagicTap?: any;
    readonly onAccessibilityEscape?: any;
    readonly onMoveShouldSetResponder?: any;
    readonly onMoveShouldSetResponderCapture?: any;
    readonly onResponderGrant?: any;
    readonly onResponderMove?: any;
    readonly onResponderReject?: any;
    readonly onResponderRelease?: any;
    readonly onResponderStart?: any;
    readonly onResponderEnd?: any;
    readonly onResponderTerminate?: any;
    readonly onResponderTerminationRequest?: any;
    readonly onStartShouldSetResponder?: any;
    readonly onStartShouldSetResponderCapture?: any;
    readonly onMouseEnter?: any;
    readonly onMouseLeave?: any;
    readonly onTouchCancel?: any;
    readonly onTouchCancelCapture?: any;
    readonly onTouchEnd?: any;
    readonly onTouchEndCapture?: any;
    readonly onTouchMove?: any;
    readonly onTouchMoveCapture?: any;
    readonly onTouchStart?: any;
    readonly onTouchStartCapture?: any;
    readonly nativeBackgroundAndroid?: any;
    readonly nativeForegroundAndroid?: any;
    readonly renderToHardwareTextureAndroid?: any;
    readonly collapsable?: any;
    readonly needsOffscreenAlphaCompositing?: any;
    readonly accessibilityLiveRegion?: any;
    readonly importantForAccessibility?: any;
    readonly hasTVPreferredFocus?: any;
    readonly nextFocusDown?: any;
    readonly nextFocusForward?: any;
    readonly nextFocusLeft?: any;
    readonly nextFocusRight?: any;
    readonly nextFocusUp?: any;
    readonly focusable?: any;
    readonly onClick?: any;
    readonly accessibilityIgnoresInvertColors?: any;
    readonly accessibilityViewIsModal?: any;
    readonly accessibilityElementsHidden?: any;
    readonly shouldRasterizeIOS?: any;
    readonly children?: any;
    readonly style?: any;
    readonly accessible?: any;
    readonly accessibilityLabel?: any;
    readonly accessibilityHint?: any;
    readonly accessibilityRole?: any;
    readonly accessibilityState?: any;
    readonly accessibilityValue?: any;
    readonly accessibilityActions?: any;
    readonly testID?: any;
    readonly nativeID?: any;
    readonly hitSlop?: any;
    readonly pointerEvents?: any;
    readonly removeClippedSubviews?: any;
}, (import("flow-builtin-types").UniqueBranding & Readonly<import("../../../Renderer/shims/ReactNativeTypes").NativeMethods> & React.ComponentMethods<import("../../../Components/View/ViewPropTypes").ViewProps>) | undefined>;
export default _default;
