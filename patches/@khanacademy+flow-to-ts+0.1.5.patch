diff --git a/node_modules/@khanacademy/flow-to-ts/babel-generator/lib/printer.js b/node_modules/@khanacademy/flow-to-ts/babel-generator/lib/printer.js
index 7383d6d..a2e18ab 100644
--- a/node_modules/@khanacademy/flow-to-ts/babel-generator/lib/printer.js
+++ b/node_modules/@khanacademy/flow-to-ts/babel-generator/lib/printer.js
@@ -313,7 +313,7 @@ class Printer {
 
     let needsParens = n.needsParens(node, parent, this._printStack);
 
-    if (this.format.retainFunctionParens && node.type === "FunctionExpression" && node.extra && node.extra.parenthesized) {
+    if (this.format.retainFunctionParens && (node.type === "TSFunctionType" || (node.type === "FunctionExpression" && node.extra && node.extra.parenthesized))) {
       needsParens = true;
     }
 
diff --git a/node_modules/@khanacademy/flow-to-ts/src/convert.js b/node_modules/@khanacademy/flow-to-ts/src/convert.js
index dc9c67c..17db91b 100644
--- a/node_modules/@khanacademy/flow-to-ts/src/convert.js
+++ b/node_modules/@khanacademy/flow-to-ts/src/convert.js
@@ -1,4 +1,11 @@
+// @ts-check
 const { parse } = require("@babel/parser");
+/**
+ * @type {any}
+ */
+/**
+ * @type {typeof import("@babel/traverse").default}
+ */
 const traverse = require("../babel-traverse/lib/index.js").default;
 const generate = require("../babel-generator/lib/index.js").default;
 const prettier = require("prettier/standalone.js");
@@ -35,6 +42,7 @@ const convert = (flowCode, options) => {
   // apply our transforms, traverse mutates the ast
   const state = {
     usedUtilityTypes: new Set(),
+    usedBuiltinTypes: new Set(),
     options: Object.assign({ inlineUtilityTypes: false }, options),
     comments
   };
@@ -46,7 +54,7 @@ const convert = (flowCode, options) => {
 
   // we pass flowCode so that generate can compute source maps
   // if we ever decide to
-  let tsCode = generate(ast, flowCode).code;
+  let tsCode = generate(ast, { retainFunctionParens: true }, flowCode).code;
   for (let i = 0; i < state.trailingLines; i++) {
     tsCode += "\n";
   }
diff --git a/node_modules/@khanacademy/flow-to-ts/src/transform.js b/node_modules/@khanacademy/flow-to-ts/src/transform.js
index 8ab9470..f3619de 100644
--- a/node_modules/@khanacademy/flow-to-ts/src/transform.js
+++ b/node_modules/@khanacademy/flow-to-ts/src/transform.js
@@ -1,4 +1,3 @@
-const path = require("path");
 const t = require("@babel/types");
 
 const computeNewlines = require("./compute-newlines.js");
@@ -61,6 +60,31 @@ const utilityTypes = {
   $Call: null
 };
 
+// TODO: These should just be inlined
+const builtinTypes = {
+  $Exact: null,
+  $TEMPORARY$object: null,
+  $TEMPORARY$string: null,
+  $TEMPORARY$array: null,
+  $ArrayBufferView: null,
+  TimeoutID: null,
+  React$Context: null,
+  React$Node: null,
+  React$Element: null,
+  React$Component: null,
+  React$ComponentType: null,
+  React$PropType$Primitive: null,
+  ReactPropsCheckType: null,
+  ReactPropsChainableTypeChecker: null,
+  // TODO: This is really a RN internal noop
+  $FlowIssue: null,
+  $FlowFixMe: null,
+  $FlowFixMeProps: null,
+  $FlowFixMeState: null,
+  $FlowFixMeEmpty: null,
+  Stringish: null,
+}
+
 // Mapping between React types for Flow and those for TypeScript.
 const UnqualifiedReactTypeNameMap = {
   SyntheticEvent: "SyntheticEvent",
@@ -95,6 +119,9 @@ const QualifiedReactTypeNameMap = {
   // TODO: handle ComponentType, ElementConfig, ElementProps, etc.
 };
 
+/**
+ * @type { import("@babel/traverse").Visitor<{ usedUtilityTypes: Set<string>, usedBuiltinTypes: Set<string> }> }
+ */
 const transform = {
   Program: {
     enter(path, state) {
@@ -162,6 +189,21 @@ const transform = {
           ...path.node.newlines.slice(1)
         ];
       }
+      if (state.usedBuiltinTypes.size > 0) {
+        const specifiers = [...state.usedBuiltinTypes].map(name => {
+          const imported = t.identifier(name);
+          const local = t.identifier(name);
+          return t.importSpecifier(local, imported);
+        });
+        const source = t.stringLiteral("flow-builtin-types");
+        const importDeclaration = t.importDeclaration(specifiers, source);
+        path.node.body = [importDeclaration, ...path.node.body];
+        path.node.newlines = [
+          [], // place the new import at the start of the file
+          [undefined, ...path.node.newlines[0]],
+          ...path.node.newlines.slice(1)
+        ];
+      }
     }
   },
   BlockStatement: {
@@ -221,7 +263,7 @@ const transform = {
     path.replaceWith(t.tsNeverKeyword());
   },
   ExistsTypeAnnotation(path) {
-    console.warn("downgrading * to any");
+    // console.warn("downgrading * to any");
     path.replaceWith(t.tsAnyKeyword());
   },
 
@@ -244,25 +286,25 @@ const transform = {
   // the processing of other nodes.
   FunctionDeclaration(path) {
     if (path.node.predicate) {
-      console.warn(
-        `removing %checks at ${locToString(path.node.predicate.loc)}`
-      );
+      // console.warn(
+      //   `removing %checks at ${locToString(path.node.predicate.loc)}`
+      // );
       delete path.node.predicate;
     }
   },
   FunctionExpression(path) {
     if (path.node.predicate) {
-      console.warn(
-        `removing %checks at ${locToString(path.node.predicate.loc)}`
-      );
+      // console.warn(
+      //   `removing %checks at ${locToString(path.node.predicate.loc)}`
+      // );
       delete path.node.predicate;
     }
   },
   ArrowFunctionExpression(path) {
     if (path.node.predicate) {
-      console.warn(
-        `removing %checks at ${locToString(path.node.predicate.loc)}`
-      );
+      // console.warn(
+      //   `removing %checks at ${locToString(path.node.predicate.loc)}`
+      // );
       delete path.node.predicate;
     }
   },
@@ -363,9 +405,9 @@ const transform = {
   TypeParameter: {
     exit(path) {
       const { name, variance, bound } = path.node;
-      if (variance) {
-        console.warn("TypeScript doesn't support variance on type parameters");
-      }
+      // if (variance) {
+      //   console.warn("TypeScript doesn't support variance on type parameters");
+      // }
       const typeParameter = {
         type: "TSTypeParameter",
         constraint: bound && bound.typeAnnotation,
@@ -387,6 +429,15 @@ const transform = {
       if (typeName.name === "$ReadOnlyArray") {
         typeName.name = "ReadonlyArray";
       }
+      if (typeName.name === "$ReadOnly") {
+        // utility-types' $ReadOnly is recursive, which isn't what Flow does, so always use `Readonly`
+        path.replaceWith(t.tsIntersectionType([
+          t.tsTypeReference(t.identifier("UniqueBranding")),
+          t.tsTypeReference(t.identifier("Readonly"), typeParameters)
+        ]));
+        state.usedBuiltinTypes.add("UniqueBranding");
+        return;
+      }
 
       if (typeName.name in utilityTypes) {
         if (
@@ -401,6 +452,10 @@ const transform = {
         }
       }
 
+      if (typeName.name in builtinTypes) {
+        state.usedBuiltinTypes.add(typeName.name);
+      }
+
       if (typeName.name in UnqualifiedReactTypeNameMap) {
         // TODO: make sure that React was imported in this file
         path.replaceWith(
@@ -412,6 +467,20 @@ const transform = {
             typeParameters
           )
         );
+      } else if (typeName.name === "Object") {
+        path.replaceWith(t.tsAnyKeyword());
+      } else if (typeName.name === "Function") {
+        const functionType = t.tsFunctionType(
+          null,
+          [{
+            type: "RestElement",
+            argument: t.identifier("args"),
+            decorators: null,
+            typeAnnotation: t.tsTypeAnnotation(t.tsAnyKeyword()),
+          }],
+          t.tsTypeAnnotation(t.tsAnyKeyword())
+        );
+        path.replaceWith(functionType);
       } else {
         path.replaceWith(t.tsTypeReference(typeName, typeParameters));
       }
@@ -435,6 +504,18 @@ const transform = {
       }
     }
   },
+  ClassProperty: {
+    exit(path) {
+      const { variance } = path.node;
+      const readonly = variance && variance.kind === "plus";
+      // if (variance && variance.kind === "minus") {
+      //   // TODO: include file and location of infraction
+      //   console.warn("typescript doesn't support writeonly properties");
+      // }
+      delete path.node.variance;
+      path.node.readonly = readonly;
+    }
+  },
   ObjectTypeProperty: {
     exit(path) {
       const { key, value, optional, variance, kind, method } = path.node; // TODO: static, kind
@@ -443,13 +524,13 @@ const transform = {
       const computed = false; // TODO: maybe set this to true for indexers
       const readonly = variance && variance.kind === "plus";
 
-      if (variance && variance.kind === "minus") {
-        // TODO: include file and location of infraction
-        console.warn("typescript doesn't support writeonly properties");
-      }
-      if (kind !== "init") {
-        console.warn("we don't handle get() or set() yet, :P");
-      }
+      // if (variance && variance.kind === "minus") {
+      //   // TODO: include file and location of infraction
+      //   console.warn("typescript doesn't support writeonly properties");
+      // }
+      // if (kind !== "init") {
+      //   console.warn("we don't handle get() or set() yet, :P");
+      // }
 
       if (method) {
         // TODO: assert value is a FunctionTypeAnnotation
@@ -486,10 +567,10 @@ const transform = {
       const { id, key, value, variance } = path.node;
 
       const readonly = variance && variance.kind === "plus";
-      if (variance && variance.kind === "minus") {
-        // TODO: include file and location of infraction
-        console.warn("typescript doesn't support writeonly properties");
-      }
+      // if (variance && variance.kind === "minus") {
+      //   // TODO: include file and location of infraction
+      //   console.warn("typescript doesn't support writeonly properties");
+      // }
 
       const identifier = {
         type: "Identifier",
@@ -532,9 +613,9 @@ const transform = {
     exit(path) {
       const { exact, properties, indexers } = path.node; // TODO: callProperties, inexact
 
-      if (exact) {
-        console.warn("downgrading exact object type");
-      }
+      // if (exact) {
+      //   console.warn("downgrading exact object type");
+      // }
 
       // TODO: create multiple sets of elements so that we can convert
       // {x: number, ...T, y: number} to {x: number} & T & {y: number}
@@ -566,6 +647,14 @@ const transform = {
       }
     }
   },
+  // TODO: Should this be replaced with a nominal type?
+  OpaqueType: {
+    exit(path) {
+      const { id, impltype, typeParameters } = path.node;
+
+      path.replaceWith(t.tsTypeAliasDeclaration(id, typeParameters, impltype));
+    }
+  },
   TypeAlias: {
     exit(path) {
       const { id, typeParameters, right } = path.node;
@@ -647,7 +736,49 @@ const transform = {
     }
   },
   ImportDeclaration: {
-    exit(path) {
+    exit(path, state) {
+      if (path.node.importKind === "typeof") {
+        /**
+         * @type { string }
+         */
+        const originalName = path.node.specifiers[0].local.name;
+        const valueOfID = t.identifier(`_valueof_${originalName}`);
+        const typeOfID = t.identifier(`_typeof_${originalName}`);
+        const expressions = [];
+
+        // type _typeof_Name = typeof _valueof_Name & UniqueBranding
+        expressions.push(t.tsTypeAliasDeclaration(
+          typeOfID,
+          undefined,
+          t.tsIntersectionType([t.tsTypeQuery(valueOfID), t.tsTypeReference(t.identifier("UniqueBranding"))])
+        ));
+        // type Name = ClassOrType<_named_typeof_Name>
+        expressions.push(t.tsTypeAliasDeclaration(
+          t.identifier(originalName),
+          undefined,
+          t.tsTypeReference(
+            t.identifier("ClassOrType"),
+            t.tsTypeParameterInstantiation([t.tsTypeReference(typeOfID)])
+          )
+        ));
+
+        /**
+         * Rename the import...
+         */
+        path.node.specifiers[0].local.name = valueOfID.name;
+        /**
+         * ...and add the typeof faffing after it.
+         * 
+         * @type { import("@babel/types").Program }
+         */
+        const parent = path.parent;
+        const body = parent.body;
+        const offset = body.findIndex(expr => expr === path.node) + 1;
+        expressions.forEach((expr, i) => body.splice(offset + i, 0, expr));
+
+        state.usedBuiltinTypes.add("ClassOrType");
+        state.usedBuiltinTypes.add("UniqueBranding");
+      }
       path.node.importKind = "value";
       stripSuffixFromImportSource(path);
     }
